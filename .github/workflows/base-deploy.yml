name: Base Deployment Workflow

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (dev/prod)'
        required: true
        type: string
      bundle_version:
        description: 'Bundle version to deploy'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  BUNDLE_IMAGE: kreed/ridelines-bundle

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout frame repository
        uses: actions/checkout@v5

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.10.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: ${{ github.run_id }}

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download OpenTofu plan artifact
        uses: actions/download-artifact@v4
        with:
          name: opentofu-plan-${{ inputs.environment }}-${{ inputs.bundle_version }}
          path: .

      - name: Extract deployment bundle
        run: |
          # Pull and extract bundle
          docker pull ghcr.io/${{ env.BUNDLE_IMAGE }}:${{ inputs.bundle_version }}
          docker create --name bundle-extract ghcr.io/${{ env.BUNDLE_IMAGE }}:${{ inputs.bundle_version }} /bin/sh
          docker cp bundle-extract:/deployment/ ./deployment/
          docker rm bundle-extract
          
          echo "Bundle extracted successfully"

      - name: Validate bundle version
        run: |
          # Verify bundle metadata matches expected version
          BUNDLE_VERSION_LABEL=$(docker inspect ghcr.io/${{ env.BUNDLE_IMAGE }}:${{ inputs.bundle_version }} \
            | jq -r '.[0].Config.Labels["ridelines.bundle.version"]')
          
          if [ "$BUNDLE_VERSION_LABEL" != "${{ inputs.bundle_version }}" ]; then
            echo "Error: Bundle version mismatch"
            echo "Expected: ${{ inputs.bundle_version }}"
            echo "Found: $BUNDLE_VERSION_LABEL"
            exit 1
          fi
          
          echo "✅ Bundle version validated"

      - name: Apply OpenTofu plan
        id: apply
        run: |
          cd deployment/terraform/environments/${{ inputs.environment }}
          tofu init
          
          # Apply the exact OpenTofu plan that was reviewed
          tofu apply -auto-approve $GITHUB_WORKSPACE/opentofu-${{ inputs.environment }}.tfplan
          
          # Get outputs
          WEBSITE_BUCKET=$(tofu output -raw website_bucket_name)
          echo "website_bucket_name=${WEBSITE_BUCKET}" >> $GITHUB_OUTPUT

      - name: Deploy hub static assets to S3
        run: |
          # Stage 1: Upload immutable assets first (_app, static assets)
          aws s3 cp deployment/artifacts/hub/static-site/ \
            s3://${{ steps.apply.outputs.website_bucket_name }}/ \
            --recursive \
            --exclude "*.html"
          
          # Stage 2: Upload HTML files (they reference the assets we just uploaded)
          aws s3 cp deployment/artifacts/hub/static-site/ \
            s3://${{ steps.apply.outputs.website_bucket_name }}/ \
            --recursive \
            --exclude "*" \
            --include "*.html"
          
          # Stage 3: Clean up old files that are no longer needed
          aws s3 sync deployment/artifacts/hub/static-site/ \
            s3://${{ steps.apply.outputs.website_bucket_name }}/ \
            --delete

      - name: Tag bundle with environment
        run: |
          # Tag the bundle as current for this environment
          docker tag ghcr.io/${{ env.BUNDLE_IMAGE }}:${{ inputs.bundle_version }} \
            ghcr.io/${{ env.BUNDLE_IMAGE }}:${{ inputs.environment }}-current
          
          docker push ghcr.io/${{ env.BUNDLE_IMAGE }}:${{ inputs.environment }}-current

      - name: Deployment summary
        run: |
          DEPLOYMENT_TIME=$(date -Iseconds)
          echo "## ${{ inputs.environment == 'prod' && 'Production' || 'Development' }} Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status:** Successfully deployed" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Bundle:** ${{ inputs.bundle_version }}" >> $GITHUB_STEP_SUMMARY
          echo "🪣 **S3 Bucket:** ${{ steps.apply.outputs.website_bucket_name }}" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ **Tagged as:** ${{ inputs.environment }}-current" >> $GITHUB_STEP_SUMMARY
          echo "🕰️ **Deployed at:** ${DEPLOYMENT_TIME}" >> $GITHUB_STEP_SUMMARY
          echo "👤 **Deployed by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.environment }}" == "dev" ]; then
            echo "🚀 Production staging triggered" >> $GITHUB_STEP_SUMMARY
          fi