name: Deploy to Production

on:
  pull_request:
    types: [opened, synchronize]
    paths: ['versions.yml']
  push:
    branches: [main]
    paths: ['versions.yml']

permissions:
  id-token: write
  contents: read
  pull-requests: write
  packages: read

jobs:
  plan-prod:
    name: Plan Production Deployment
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Download packages
        run: ./scripts/download-packages.sh production

      - name: Set package versions for summary
        run: |
          HUB_VERSION=$(yq eval '.production.hub.version' versions.yml)
          LAMBDA_VERSION=$(yq eval '.production.drivetrain.lambda.version' versions.yml)
          LAYER_VERSION=$(yq eval '.production.drivetrain.tippecanoe_layer.version' versions.yml)
          
          echo "HUB_VERSION=${HUB_VERSION}" >> $GITHUB_ENV
          echo "LAMBDA_VERSION=${LAMBDA_VERSION}" >> $GITHUB_ENV
          echo "LAYER_VERSION=${LAYER_VERSION}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: ${{ github.run_id }}

      - name: Plan production infrastructure changes
        uses: dflook/tofu-plan@v2
        with:
          path: environments/prod
          var_file: |
            environments/prod/terraform.tfvars

  apply-prod:
    name: Apply Production Deployment
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production  # Requires manual approval

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Download packages
        run: ./scripts/download-packages.sh production

      - name: Set package versions for summary
        run: |
          HUB_VERSION=$(yq eval '.production.hub.version' versions.yml)
          LAMBDA_VERSION=$(yq eval '.production.drivetrain.lambda.version' versions.yml)
          LAYER_VERSION=$(yq eval '.production.drivetrain.tippecanoe_layer.version' versions.yml)
          
          echo "HUB_VERSION=${HUB_VERSION}" >> $GITHUB_ENV
          echo "LAMBDA_VERSION=${LAMBDA_VERSION}" >> $GITHUB_ENV
          echo "LAYER_VERSION=${LAYER_VERSION}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: ${{ github.run_id }}

      - name: Apply production infrastructure changes
        id: apply
        uses: dflook/tofu-apply@v2
        with:
          path: environments/prod
          var_file: |
            environments/prod/terraform.tfvars

      - name: Deploy hub to S3
        run: |
          aws s3 sync artifacts/hub/static-site/ s3://${{ steps.apply.outputs.website_bucket_name }}/ --delete

      - name: Production deployment summary
        run: |
          echo "## Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Infrastructure deployed successfully to production" >> $GITHUB_STEP_SUMMARY
          echo "📦 Packages deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- Hub: ${HUB_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- Drivetrain Lambda: ${LAMBDA_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- Tippecanoe Layer: ${LAYER_VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "🌐 Environment: Production" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Deployed from commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY