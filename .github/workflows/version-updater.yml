name: Update Package Versions

on:
  registry_package:
    types: [published]
  workflow_dispatch:  # Allow manual triggering for testing

permissions:
  contents: write
  pull-requests: write
  packages: read

jobs:
  update-versions:
    name: Update Package Versions
    if: |
      github.event_name == 'workflow_dispatch' ||
      contains(github.event.package.name, 'ridelines/hub') ||
      contains(github.event.package.name, 'ridelines/drivetrain-lambda') ||
      contains(github.event.package.name, 'ridelines/drivetrain-tippecanoe-layer')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install yq for YAML processing
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Check for existing version update PR
        id: check-pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list --label "package-version-update" --state open --json number --jq '.[0].number // empty')
          echo "existing_pr=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "Found existing PR: ${PR_NUMBER}"

      - name: Close stale version update PRs
        if: steps.check-pr.outputs.existing_pr != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Closing stale PR #${{ steps.check-pr.outputs.existing_pr }}"
          gh pr close ${{ steps.check-pr.outputs.existing_pr }} --comment "Superseded by newer package versions"

      - name: Fetch latest package versions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch latest versions for ALL packages
          echo "Fetching latest package versions..."
          
          # Get latest hub version
          HUB_VERSION=$(gh api /orgs/ridelines/packages/container/hub/versions --jq '.[0].name // "latest"')
          echo "HUB_VERSION=${HUB_VERSION}" >> $GITHUB_ENV
          
          # Get latest lambda version  
          LAMBDA_VERSION=$(gh api /orgs/ridelines/packages/container/drivetrain-lambda/versions --jq '.[0].name // "latest"' 2>/dev/null || echo "latest")
          echo "LAMBDA_VERSION=${LAMBDA_VERSION}" >> $GITHUB_ENV
          
          # Get latest layer version
          LAYER_VERSION=$(gh api /orgs/ridelines/packages/container/drivetrain-tippecanoe-layer/versions --jq '.[0].name // "latest"' 2>/dev/null || echo "latest")
          echo "LAYER_VERSION=${LAYER_VERSION}" >> $GITHUB_ENV
          
          echo "Package versions:"
          echo "- Hub: ${HUB_VERSION}"
          echo "- Lambda: ${LAMBDA_VERSION}"
          echo "- Layer: ${LAYER_VERSION}"

      - name: Update versions.yml with latest packages
        run: |
          echo "Updating versions.yml with latest package versions..."
          
          # Update development versions with latest packages
          yq eval ".development.hub.version = \"${{ env.HUB_VERSION }}\"" -i versions.yml
          yq eval ".development.drivetrain.lambda.version = \"${{ env.LAMBDA_VERSION }}\"" -i versions.yml
          yq eval ".development.drivetrain.tippecanoe_layer.version = \"${{ env.LAYER_VERSION }}\"" -i versions.yml
          
          echo "Updated versions.yml:"
          cat versions.yml

      - name: Create consolidated PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "chore: update package versions"
          body: |
            ü§ñ **Automated Package Version Update**
            
            This PR updates all Ridelines packages to their latest versions for the development environment:
            
            **Updated Packages:**
            - **Hub**: `${{ env.HUB_VERSION }}`
            - **Drivetrain Lambda**: `${{ env.LAMBDA_VERSION }}`  
            - **Tippecanoe Layer**: `${{ env.LAYER_VERSION }}`
            
            **Deployment Workflow:**
            - ‚úÖ **Development**: Will auto-deploy when this PR is merged
            - ‚è∏Ô∏è **Production**: Requires manual update of production versions in this file
            
            **What happens next:**
            1. Merge this PR to deploy to development environment
            2. Test the development deployment
            3. Update production versions manually when ready to deploy to production
            
            ---
            *Generated by the version-updater workflow*
          branch: update-package-versions
          labels: package-version-update
          delete-branch: true
          commit-message: |
            chore: update package versions
            
            - Hub: ${{ env.HUB_VERSION }}
            - Drivetrain Lambda: ${{ env.LAMBDA_VERSION }}
            - Tippecanoe Layer: ${{ env.LAYER_VERSION }}